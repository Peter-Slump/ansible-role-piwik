upstream php-{{ piwik_user }}-handler {
  server 127.0.0.1:{{ piwik_php_port }};
  #server unix:/var/run/php5-fpm.sock;
}

{% if piwik_use_letsencrypt or piwik_use_self_signed_ssl %}
server {
    listen 80;
    listen [::]:80;

    server_name {{ piwik_hostname }};

    {% if piwik_use_letsencrypt %}
    location '/.well-known/acme-challenge' {
        root {{ nginx_letsencrypt_webroot }};
    }
    {% endif %}

    location / {
      # Enforce HTTPS by default
      return 301 https://$server_name$request_uri;
    }
}
{% endif %}

server {
    {% if piwik_use_letsencrypt or piwik_use_self_signed_ssl %}
    listen 443 ssl;
    listen [::]:443 ssl;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_dhparam /etc/nginx/ssl/dhparams.pem;
    {% else %}
    listen 80;
    listen [::]:80;
    {% endif %}

    server_name {{ piwik_hostname }};

    {% if piwik_use_self_signed_ssl %}
    ssl_certificate /usr/local/share/ca-certificates/{{ piwik_hostname }}.crt;
    ssl_certificate_key /etc/ssl/private/{{ piwik_hostname }}.key;
    {% elif piwik_use_letsencrypt %}
    ssl_certificate /etc/letsencrypt/live/{{ piwik_hostname }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ piwik_hostname }}/privkey.pem;
    {% endif %}

    # Parameterization using hostname of access and log filenames.
    access_log  /var/log/nginx/{{ piwik_hostname }}_access.log;
    error_log   /var/log/nginx/{{ piwik_hostname }}_error.log;

    # Disable all methods besides HEAD, GET and POST.
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 444;
    }

    root  {{ piwik_web_root }}/piwik;
    index  index.php index.html;

    # Disallow any usage of piwik assets if referer is non valid.
    location ~* ^.+\.(?:jpg|png|css|gif|jpeg|js|swf)$ {
       # Defining the valid referers.
       valid_referers none blocked *.{{ piwik_hostname }} {{ piwik_hostname }};
       if ($invalid_referer)  {
          return 444;
       }
       expires max;
       break;
    }

    # Support for favicon. Return a 204 (No Content) if the favicon
    # doesn't exist.
    location = /favicon.ico {
             try_files /favicon.ico =204;
    }

    # Try all locations and relay to index.php as a fallback.
    location / {
       try_files $uri /index.php;
    }

    # Relay all index.php requests to fastcgi.
    location ~* ^/(?:index|piwik)\.php(/|$) {
      fastcgi_pass php-{{ piwik_user }}-handler;
      #fastcgi_split_path_info ^(.+\.php)(/.*)$;
      include fastcgi_params;
      # When you are using symlinks to link the document root to the
      # current version of your application, you should pass the real
      # application path instead of the path to the symlink to PHP
      # FPM.
      # Otherwise, PHP's OPcache may not properly detect changes to
      # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
      # for more information).
      fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
      fastcgi_param DOCUMENT_ROOT $realpath_root;
      # Prevents URIs that include the front controller. This will 404:
      # http://domain.tld/app.php/some-path
      # Remove the internal directive to allow URIs like this
      #internal;
    }

    # Any other attempt to access PHP files returns a 404.
    location ~ \.php$ {
      return 404;
    }

    # Return a 404 for all text files.
    location ~* ^/(?:README|LICENSE[^.]*|LEGALNOTICE)(?:\.txt)*$ {
             return 404;
    }

    # # The 404 is signaled through a static page.
    # error_page  404  /404.html;

    # ## All server error pages go to 50x.html at the document root.
    # error_page 500 502 503 504  /50x.html;
    # location = /50x.html {
    #       root   /var/www/nginx-default;
    # }
} # server
